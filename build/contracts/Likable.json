{
  "contractName": "Likable",
  "abi": [
    {
      "inputs": [],
      "name": "likes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_likes",
          "type": "uint256"
        }
      ],
      "name": "setLikes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLikes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLikes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"likes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_likes\",\"type\":\"uint256\"}],\"name\":\"setLikes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shradha Rajmane\",\"details\":\"@notice UInt256 roll-over use cases  -     Option 1. Rollover is needed in case of overflow or underflow.    Option 2: Rollover is NOT needed in case of overflow and/or underflow. (e.g., customer balance).    Further, Option 2 can be implemented using three approches:        a. SafeMath for solidity versions any <= or > 0.8. [safemath is expensive function]       b. Use solidity version >=0.8 which will handle rollover in case of overflow or underflow.       c. Use solidity version of this contract (i.e. 0.7.0) and add explicit logic to check overflow or underflow.                Option 2.c,2.b and option 1 are implemented below. Becasue SafeMath is expensive function for this contract.    Comments are used to represent Option 1 and option 2.b. \",\"kind\":\"dev\",\"methods\":{},\"title\":\"UInteger Rollover Test Smart Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/Likable.sol\":\"Likable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/Likable.sol\":{\"keccak256\":\"0xfe529e83a886b343655180d8cf5d7d4ca4d8786b2b3baf54ceee78dbe7d8c886\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ffccfc1a00223307d0683915ad991979be9ab51fde392398a5e5318dc2a499b4\",\"dweb:/ipfs/QmWGEDNTVzoZAewuMguWhnRih3CH82aEaQcY5rTrNxFssR\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610171806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634f2be91f1461005c57806362a1c58314610066578063a7f4377914610084578063d1dc9bd81461008e578063de812c30146100ac575b600080fd5b6100646100da565b005b61006e610103565b6040518082815260200191505060405180910390f35b61008c61010c565b005b61009661012b565b6040518082815260200191505060405180910390f35b6100d8600480360360208110156100c257600080fd5b8101908080359060200190929190505050610131565b005b600060016000540190506000548111156101005760008081548092919060010191905055505b50565b60008054905090565b600080541115610129576000808154809291906001900391905055505b565b60005481565b806000819055505056fea264697066735822122018676b81bbabbdf0653e5ddaa6aee5de7c435328ce90c3ed14abdc4708e2ae2864736f6c63430007000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80634f2be91f1461005c57806362a1c58314610066578063a7f4377914610084578063d1dc9bd81461008e578063de812c30146100ac575b600080fd5b6100646100da565b005b61006e610103565b6040518082815260200191505060405180910390f35b61008c61010c565b005b61009661012b565b6040518082815260200191505060405180910390f35b6100d8600480360360208110156100c257600080fd5b8101908080359060200190929190505050610131565b005b600060016000540190506000548111156101005760008081548092919060010191905055505b50565b60008054905090565b600080541115610129576000808154809291906001900391905055505b565b60005481565b806000819055505056fea264697066735822122018676b81bbabbdf0653e5ddaa6aee5de7c435328ce90c3ed14abdc4708e2ae2864736f6c63430007000033",
  "immutableReferences": {},
  "sourceMap": "962:357:0:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "962:357:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1071:111;;;:::i;:::-;;1248:69;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1003:67;;;:::i;:::-;;981:20;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1184:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1071:111;1099:20;1130:1;1122:5;;:9;1099:32;;1155:5;;1140:12;:20;1137:42;;;1171:5;;:8;;;;;;;;;;;;;1137:42;1071:111;:::o;1248:69::-;1288:7;1309:5;;1302:12;;1248:69;:::o;1003:67::-;1046:1;1038:5;;:9;1034:33;;;1059:5;;:8;;;;;;;;;;;;;;1034:33;1003:67::o;981:20::-;;;;:::o;1184:63::-;1238:6;1230:5;:14;;;;1184:63;:::o",
  "source": "//SPDX-License-Identifier: MIT\n//solhint-disable-next-line\npragma solidity 0.7.0; \n\n/**\n* @title UInteger Rollover Test Smart Contract\n*\n* @dev @notice UInt256 roll-over use cases  - \n*    Option 1. Rollover is needed in case of overflow or underflow.\n*    Option 2: Rollover is NOT needed in case of overflow and/or underflow. (e.g., customer balance).\n*    Further, Option 2 can be implemented using three approches: \n*       a. SafeMath for solidity versions any <= or > 0.8. [safemath is expensive function]\n*       b. Use solidity version >=0.8 which will handle rollover in case of overflow or underflow.\n*       c. Use solidity version of this contract (i.e. 0.7.0) and add explicit logic to check overflow or underflow.            \n*    Option 2.c,2.b and option 1 are implemented below. Becasue SafeMath is expensive function for this contract.\n*    Comments are used to represent Option 1 and option 2.b. \n* @author Shradha Rajmane\n*\n*/\n\n//Option 2.c\n\ncontract Likable {\nuint256 public likes;\nfunction remove() public {\n    if (likes > 0)  \n        likes --;\n}\nfunction add() public {\n    uint256 overflowtest = likes + 1;\n    if(overflowtest > likes) \n        likes ++;\n}\n\nfunction setLikes(uint256 _likes) public{\n    likes = _likes;\n}\nfunction getLikes() public view returns(uint256){\n    return likes;\n}\n}\n\n\n/// @notice @dev Option 1 and option 2.b\n/*\npragma solidity 0.8.0;\ncontract Likable {\nuint256 public likes;\nfunction remove() public {\n    //Option 1: Use unchecked if rollover is needed depending of use case\n    //unchecked{     \n        likes--;\n    //}\n \n}\nfunction add() public {\n    //unchecked{\n    likes++;\n    //}   \n}\n} \n*/\n",
  "sourcePath": "/home/shradhar/avem/contracts/Likable.sol",
  "ast": {
    "absolutePath": "project:/contracts/Likable.sol",
    "exportedSymbols": {
      "Likable": [
        51
      ]
    },
    "id": 52,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "59:22:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 2,
          "nodeType": "StructuredDocumentation",
          "src": "84:862:0",
          "text": " @title UInteger Rollover Test Smart Contract\n @dev @notice UInt256 roll-over use cases  - \n    Option 1. Rollover is needed in case of overflow or underflow.\n    Option 2: Rollover is NOT needed in case of overflow and/or underflow. (e.g., customer balance).\n    Further, Option 2 can be implemented using three approches: \n       a. SafeMath for solidity versions any <= or > 0.8. [safemath is expensive function]\n       b. Use solidity version >=0.8 which will handle rollover in case of overflow or underflow.\n       c. Use solidity version of this contract (i.e. 0.7.0) and add explicit logic to check overflow or underflow.            \n    Option 2.c,2.b and option 1 are implemented below. Becasue SafeMath is expensive function for this contract.\n    Comments are used to represent Option 1 and option 2.b. \n @author Shradha Rajmane"
        },
        "fullyImplemented": true,
        "id": 51,
        "linearizedBaseContracts": [
          51
        ],
        "name": "Likable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "d1dc9bd8",
            "id": 4,
            "mutability": "mutable",
            "name": "likes",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 51,
            "src": "981:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 3,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "981:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 14,
              "nodeType": "Block",
              "src": "1028:42:0",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 9,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 7,
                      "name": "likes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4,
                      "src": "1038:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 8,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1046:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1038:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 13,
                  "nodeType": "IfStatement",
                  "src": "1034:33:0",
                  "trueBody": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 11,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "--",
                      "prefix": false,
                      "src": "1059:8:0",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 10,
                        "name": "likes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4,
                        "src": "1059:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 12,
                    "nodeType": "ExpressionStatement",
                    "src": "1059:8:0"
                  }
                }
              ]
            },
            "documentation": null,
            "functionSelector": "a7f43779",
            "id": 15,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "remove",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 5,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1018:2:0"
            },
            "returnParameters": {
              "id": 6,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1028:0:0"
            },
            "scope": 51,
            "src": "1003:67:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 31,
              "nodeType": "Block",
              "src": "1093:89:0",
              "statements": [
                {
                  "assignments": [
                    19
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19,
                      "mutability": "mutable",
                      "name": "overflowtest",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 31,
                      "src": "1099:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 18,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1099:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 23,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 22,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 20,
                      "name": "likes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4,
                      "src": "1122:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "+",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "31",
                      "id": 21,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1130:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1122:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1099:32:0"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 26,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 24,
                      "name": "overflowtest",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19,
                      "src": "1140:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "argumentTypes": null,
                      "id": 25,
                      "name": "likes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4,
                      "src": "1155:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1140:20:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 30,
                  "nodeType": "IfStatement",
                  "src": "1137:42:0",
                  "trueBody": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 28,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1171:8:0",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 27,
                        "name": "likes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4,
                        "src": "1171:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 29,
                    "nodeType": "ExpressionStatement",
                    "src": "1171:8:0"
                  }
                }
              ]
            },
            "documentation": null,
            "functionSelector": "4f2be91f",
            "id": 32,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "add",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 16,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1083:2:0"
            },
            "returnParameters": {
              "id": 17,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1093:0:0"
            },
            "scope": 51,
            "src": "1071:111:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 41,
              "nodeType": "Block",
              "src": "1224:23:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 39,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 37,
                      "name": "likes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4,
                      "src": "1230:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 38,
                      "name": "_likes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 34,
                      "src": "1238:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1230:14:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 40,
                  "nodeType": "ExpressionStatement",
                  "src": "1230:14:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "de812c30",
            "id": 42,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setLikes",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 35,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34,
                  "mutability": "mutable",
                  "name": "_likes",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 42,
                  "src": "1202:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 33,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1202:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1201:16:0"
            },
            "returnParameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1224:0:0"
            },
            "scope": 51,
            "src": "1184:63:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 49,
              "nodeType": "Block",
              "src": "1296:21:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 47,
                    "name": "likes",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4,
                    "src": "1309:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 46,
                  "id": 48,
                  "nodeType": "Return",
                  "src": "1302:12:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "62a1c583",
            "id": 50,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getLikes",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 43,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1265:2:0"
            },
            "returnParameters": {
              "id": 46,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 45,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 50,
                  "src": "1288:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1288:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1287:9:0"
            },
            "scope": 51,
            "src": "1248:69:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 52,
        "src": "962:357:0"
      }
    ],
    "src": "59:1596:0"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/Likable.sol",
      "exportedSymbols": {
        "Likable": [
          51
        ]
      },
      "license": "MIT"
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "0.7",
            ".0"
          ]
        },
        "id": 1,
        "name": "PragmaDirective",
        "src": "59:22:0"
      },
      {
        "attributes": {
          "abstract": false,
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "contract",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            51
          ],
          "name": "Likable",
          "scope": 52
        },
        "children": [
          {
            "attributes": {
              "text": " @title UInteger Rollover Test Smart Contract\n @dev @notice UInt256 roll-over use cases  - \n    Option 1. Rollover is needed in case of overflow or underflow.\n    Option 2: Rollover is NOT needed in case of overflow and/or underflow. (e.g., customer balance).\n    Further, Option 2 can be implemented using three approches: \n       a. SafeMath for solidity versions any <= or > 0.8. [safemath is expensive function]\n       b. Use solidity version >=0.8 which will handle rollover in case of overflow or underflow.\n       c. Use solidity version of this contract (i.e. 0.7.0) and add explicit logic to check overflow or underflow.            \n    Option 2.c,2.b and option 1 are implemented below. Becasue SafeMath is expensive function for this contract.\n    Comments are used to represent Option 1 and option 2.b. \n @author Shradha Rajmane"
            },
            "id": 2,
            "name": "StructuredDocumentation",
            "src": "84:862:0"
          },
          {
            "attributes": {
              "constant": false,
              "functionSelector": "d1dc9bd8",
              "mutability": "mutable",
              "name": "likes",
              "overrides": null,
              "scope": 51,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "uint256",
              "value": null,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "name": "uint256",
                  "type": "uint256"
                },
                "id": 3,
                "name": "ElementaryTypeName",
                "src": "981:7:0"
              }
            ],
            "id": 4,
            "name": "VariableDeclaration",
            "src": "981:20:0"
          },
          {
            "attributes": {
              "documentation": null,
              "functionSelector": "a7f43779",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "remove",
              "overrides": null,
              "scope": 51,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 5,
                "name": "ParameterList",
                "src": "1018:2:0"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 6,
                "name": "ParameterList",
                "src": "1028:0:0"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "falseBody": null
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": ">",
                          "type": "bool"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 4,
                              "type": "uint256",
                              "value": "likes"
                            },
                            "id": 7,
                            "name": "Identifier",
                            "src": "1038:5:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "30",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 0",
                              "value": "0"
                            },
                            "id": 8,
                            "name": "Literal",
                            "src": "1046:1:0"
                          }
                        ],
                        "id": 9,
                        "name": "BinaryOperation",
                        "src": "1038:9:0"
                      },
                      {
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "operator": "--",
                              "prefix": false,
                              "type": "uint256"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 4,
                                  "type": "uint256",
                                  "value": "likes"
                                },
                                "id": 10,
                                "name": "Identifier",
                                "src": "1059:5:0"
                              }
                            ],
                            "id": 11,
                            "name": "UnaryOperation",
                            "src": "1059:8:0"
                          }
                        ],
                        "id": 12,
                        "name": "ExpressionStatement",
                        "src": "1059:8:0"
                      }
                    ],
                    "id": 13,
                    "name": "IfStatement",
                    "src": "1034:33:0"
                  }
                ],
                "id": 14,
                "name": "Block",
                "src": "1028:42:0"
              }
            ],
            "id": 15,
            "name": "FunctionDefinition",
            "src": "1003:67:0"
          },
          {
            "attributes": {
              "documentation": null,
              "functionSelector": "4f2be91f",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "add",
              "overrides": null,
              "scope": 51,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 16,
                "name": "ParameterList",
                "src": "1083:2:0"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 17,
                "name": "ParameterList",
                "src": "1093:0:0"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "assignments": [
                        19
                      ]
                    },
                    "children": [
                      {
                        "attributes": {
                          "constant": false,
                          "mutability": "mutable",
                          "name": "overflowtest",
                          "overrides": null,
                          "scope": 31,
                          "stateVariable": false,
                          "storageLocation": "default",
                          "type": "uint256",
                          "value": null,
                          "visibility": "internal"
                        },
                        "children": [
                          {
                            "attributes": {
                              "name": "uint256",
                              "type": "uint256"
                            },
                            "id": 18,
                            "name": "ElementaryTypeName",
                            "src": "1099:7:0"
                          }
                        ],
                        "id": 19,
                        "name": "VariableDeclaration",
                        "src": "1099:20:0"
                      },
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "+",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 4,
                              "type": "uint256",
                              "value": "likes"
                            },
                            "id": 20,
                            "name": "Identifier",
                            "src": "1122:5:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "31",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 1",
                              "value": "1"
                            },
                            "id": 21,
                            "name": "Literal",
                            "src": "1130:1:0"
                          }
                        ],
                        "id": 22,
                        "name": "BinaryOperation",
                        "src": "1122:9:0"
                      }
                    ],
                    "id": 23,
                    "name": "VariableDeclarationStatement",
                    "src": "1099:32:0"
                  },
                  {
                    "attributes": {
                      "falseBody": null
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": ">",
                          "type": "bool"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 19,
                              "type": "uint256",
                              "value": "overflowtest"
                            },
                            "id": 24,
                            "name": "Identifier",
                            "src": "1140:12:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 4,
                              "type": "uint256",
                              "value": "likes"
                            },
                            "id": 25,
                            "name": "Identifier",
                            "src": "1155:5:0"
                          }
                        ],
                        "id": 26,
                        "name": "BinaryOperation",
                        "src": "1140:20:0"
                      },
                      {
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "operator": "++",
                              "prefix": false,
                              "type": "uint256"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 4,
                                  "type": "uint256",
                                  "value": "likes"
                                },
                                "id": 27,
                                "name": "Identifier",
                                "src": "1171:5:0"
                              }
                            ],
                            "id": 28,
                            "name": "UnaryOperation",
                            "src": "1171:8:0"
                          }
                        ],
                        "id": 29,
                        "name": "ExpressionStatement",
                        "src": "1171:8:0"
                      }
                    ],
                    "id": 30,
                    "name": "IfStatement",
                    "src": "1137:42:0"
                  }
                ],
                "id": 31,
                "name": "Block",
                "src": "1093:89:0"
              }
            ],
            "id": 32,
            "name": "FunctionDefinition",
            "src": "1071:111:0"
          },
          {
            "attributes": {
              "documentation": null,
              "functionSelector": "de812c30",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "setLikes",
              "overrides": null,
              "scope": 51,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "_likes",
                      "overrides": null,
                      "scope": 42,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 33,
                        "name": "ElementaryTypeName",
                        "src": "1202:7:0"
                      }
                    ],
                    "id": 34,
                    "name": "VariableDeclaration",
                    "src": "1202:14:0"
                  }
                ],
                "id": 35,
                "name": "ParameterList",
                "src": "1201:16:0"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 36,
                "name": "ParameterList",
                "src": "1224:0:0"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 4,
                              "type": "uint256",
                              "value": "likes"
                            },
                            "id": 37,
                            "name": "Identifier",
                            "src": "1230:5:0"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 34,
                              "type": "uint256",
                              "value": "_likes"
                            },
                            "id": 38,
                            "name": "Identifier",
                            "src": "1238:6:0"
                          }
                        ],
                        "id": 39,
                        "name": "Assignment",
                        "src": "1230:14:0"
                      }
                    ],
                    "id": 40,
                    "name": "ExpressionStatement",
                    "src": "1230:14:0"
                  }
                ],
                "id": 41,
                "name": "Block",
                "src": "1224:23:0"
              }
            ],
            "id": 42,
            "name": "FunctionDefinition",
            "src": "1184:63:0"
          },
          {
            "attributes": {
              "documentation": null,
              "functionSelector": "62a1c583",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "getLikes",
              "overrides": null,
              "scope": 51,
              "stateMutability": "view",
              "virtual": false,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 43,
                "name": "ParameterList",
                "src": "1265:2:0"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "",
                      "overrides": null,
                      "scope": 50,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 44,
                        "name": "ElementaryTypeName",
                        "src": "1288:7:0"
                      }
                    ],
                    "id": 45,
                    "name": "VariableDeclaration",
                    "src": "1288:7:0"
                  }
                ],
                "id": 46,
                "name": "ParameterList",
                "src": "1287:9:0"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 46
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "overloadedDeclarations": [
                            null
                          ],
                          "referencedDeclaration": 4,
                          "type": "uint256",
                          "value": "likes"
                        },
                        "id": 47,
                        "name": "Identifier",
                        "src": "1309:5:0"
                      }
                    ],
                    "id": 48,
                    "name": "Return",
                    "src": "1302:12:0"
                  }
                ],
                "id": 49,
                "name": "Block",
                "src": "1296:21:0"
              }
            ],
            "id": 50,
            "name": "FunctionDefinition",
            "src": "1248:69:0"
          }
        ],
        "id": 51,
        "name": "ContractDefinition",
        "src": "962:357:0"
      }
    ],
    "id": 52,
    "name": "SourceUnit",
    "src": "59:1596:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.0+commit.9e61f92b.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2022-03-10T02:53:48.914Z",
  "devdoc": {
    "author": "Shradha Rajmane",
    "details": "@notice UInt256 roll-over use cases  -     Option 1. Rollover is needed in case of overflow or underflow.    Option 2: Rollover is NOT needed in case of overflow and/or underflow. (e.g., customer balance).    Further, Option 2 can be implemented using three approches:        a. SafeMath for solidity versions any <= or > 0.8. [safemath is expensive function]       b. Use solidity version >=0.8 which will handle rollover in case of overflow or underflow.       c. Use solidity version of this contract (i.e. 0.7.0) and add explicit logic to check overflow or underflow.                Option 2.c,2.b and option 1 are implemented below. Becasue SafeMath is expensive function for this contract.    Comments are used to represent Option 1 and option 2.b. ",
    "kind": "dev",
    "methods": {},
    "title": "UInteger Rollover Test Smart Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}